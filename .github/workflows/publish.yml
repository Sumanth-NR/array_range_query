name: Publish to crates.io

on:
  push:
    branches: [ "main" ]
    paths:
      - 'Cargo.toml'

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get current version
      id: get-version
      run: |
        VERSION=$(grep -m1 '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

    - name: Check if version exists on crates.io
      id: version-check
      run: |
        CURRENT_VERSION="${{ steps.get-version.outputs.version }}"
        CRATE_NAME="array_range_query"
        
        echo "Current version in Cargo.toml: $CURRENT_VERSION"
        
        # Query crates.io API for the crate information
        RESPONSE=$(curl -s -w "\n%{http_code}" "https://crates.io/api/v1/crates/$CRATE_NAME")
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        CRATE_INFO=$(echo "$RESPONSE" | head -n-1)
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo "Warning: Could not fetch crate info from crates.io (HTTP $HTTP_CODE)"
          echo "Assuming version is new and should be published"
          echo "changed=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Extract the latest version from crates.io using grep and sed
        PUBLISHED_VERSION=$(echo "$CRATE_INFO" | grep -o '"max_version":"[^"]*"' | head -1 | sed 's/"max_version":"\(.*\)"/\1/')
        
        if [ -z "$PUBLISHED_VERSION" ]; then
          echo "Warning: Could not extract published version from API response"
          echo "Assuming version is new and should be published"
          echo "changed=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Latest published version: $PUBLISHED_VERSION"
        
        if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
          echo "Version has changed - will publish"
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "Version unchanged - skipping publish"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

  publish:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions-rust-lang/setup-rust-toolchain@v1

    - uses: Swatinem/rust-cache@v2

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
